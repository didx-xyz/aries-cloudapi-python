version: "3"

services:
  governance-ga-wallets-db:
    image: postgres:16-alpine
    container_name: governance-ga-wallets-db
    command: postgres -c listen_addresses='*' -c 'max_connections=500'
    env_file:
      - environments/governance-ga/db.default.env
    volumes:
      - ./resources/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - governance-ga
      - host
    tty: true
  # ngrok-governance-ga:
  #   image: wernight/ngrok
  #   env_file:
  #     - environments/governance-ga/aca-py-agent.default.env
  #   command: ngrok http governance-ga-agent:3020 --log stdout
  #   networks:
  #     - governance-ga
  #     - host
  #   depends_on:
  #     - ledger-nodes
  #     - ledger-browser
  governance-ga-agent:
    image: ${REGISTRY:-local}/governance-ga-agent:${IMAGE_TAG:-latest}
    container_name: governance-ga-agent
    build:
      context: .
      dockerfile: dockerfiles/agents/Dockerfile.agent
    env_file:
      - environments/governance-ga/aca-py-agent.default.env
    environment:
      ACAPY_AUTO_ENDORSE_TRANSACTIONS: false
    ports:
      - 0.0.0.0:3020:3020
      - 0.0.0.0:3021:3021
    depends_on:
      governance-ga-wallets-db:
        condition: service_started
      ledger-nodes:
        condition: service_healthy
      ledger-browser:
        condition: service_healthy
      redis-cluster:
        condition: service_started
    networks:
      - governance-ga
      - host
      - redis-cluster-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3021/status/ready"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 15s
  governance-trust-registry:
    image: ${REGISTRY:-local}/governance-trust-registry:${IMAGE_TAG:-latest}
    container_name: governance-trust-registry
    build:
      context: .
      dockerfile: ./dockerfiles/trustregistry/Dockerfile
    env_file:
      - environments/trustregistry/trustregistry.default.env
    ports:
      - 0.0.0.0:8001:8001
    volumes:
      - ./trustregistry:/trustregistry
      - ./logs:/logs
    networks:
      - governance-ga
      - governance-multitenant
      - host
    depends_on:
      trustregistry-db:
        condition: service_healthy
  trustregistry-db:
    image: postgres:16-alpine
    container_name: trustregistry-db
    command: postgres -c listen_addresses='*' -c 'max_connections=500'
    environment:
      - POSTGRES_DB=trustregistry
      - POSTGRES_USER=trustregistry
      - POSTGRES_PASSWORD=trustregistry
      - PGUSER=trustregistry
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - governance-ga
      - governance-multitenant
      - host
    tty: true
  governance-multitenant-web:
    image: ${REGISTRY:-local}/governance-multitenant-web:${IMAGE_TAG:-latest}
    container_name: governance-multitenant-web
    build:
      context: .
      dockerfile: ./dockerfiles/fastapi/Dockerfile
    ports:
      - 0.0.0.0:8100:8000
    volumes:
      - ./app:/app
      - ./environments/governance-multitenant/fastapi.default.env:/app/.env
      - ./logs/multitenant:/logs
    depends_on:
      governance-multitenant-wallets-db:
        condition: service_started
      ledger-nodes:
        condition: service_healthy
      ledger-browser:
        condition: service_healthy
      governance-ga-agent:
        condition: service_healthy
      governance-multitenant-agent:
        condition: service_healthy
    networks:
      - governance-multitenant
      - host
    env_file:
      - environments/governance-multitenant/fastapi.default.env
  governance-ga-web:
    image: ${REGISTRY:-local}/governance-ga-web:${IMAGE_TAG:-latest}
    container_name: governance-ga-web
    build:
      context: .
      dockerfile: ./dockerfiles/fastapi/Dockerfile
    ports:
      - 0.0.0.0:8200:8000
    volumes:
      - ./app:/app
      - ./environments/governance-ga/fastapi.default.env:/app/.env
      - ./logs/ga:/logs
    depends_on:
      governance-ga-wallets-db:
        condition: service_started
      ledger-nodes:
        condition: service_healthy
      ledger-browser:
        condition: service_healthy
      governance-ga-agent:
        condition: service_healthy
    networks:
      - governance-ga
      - host
    env_file:
      - environments/governance-ga/fastapi.default.env
  governance-tenant-web:
    image: ${REGISTRY:-local}/governance-tenant-web:${IMAGE_TAG:-latest}
    container_name: governance-tenant-web
    build:
      context: .
      dockerfile: ./dockerfiles/fastapi/Dockerfile
    ports:
      - 0.0.0.0:8300:8000
    volumes:
      - ./app:/app
      - ./environments/governance-tenant/fastapi.default.env:/app/.env
      - ./logs/tenant:/logs
    depends_on:
      governance-multitenant-wallets-db:
        condition: service_started
      ledger-nodes:
        condition: service_healthy
      ledger-browser:
        condition: service_healthy
      governance-ga-agent:
        condition: service_healthy
      governance-multitenant-agent:
        condition: service_healthy
    networks:
      - governance-multitenant
      - host
    env_file:
      - environments/governance-tenant/fastapi.default.env
  governance-public-web:
    image: ${REGISTRY:-local}/governance-public-web:${IMAGE_TAG:-latest}
    container_name: governance-public-web
    build:
      context: .
      dockerfile: ./dockerfiles/fastapi/Dockerfile
    ports:
      - 0.0.0.0:8400:8000
    volumes:
      - ./app:/app
      - ./environments/governance-public/fastapi.default.env:/app/.env
      - ./logs/tenant:/logs
    depends_on:
      governance-multitenant-wallets-db:
        condition: service_started
      ledger-nodes:
        condition: service_healthy
      ledger-browser:
        condition: service_healthy
      governance-ga-agent:
        condition: service_healthy
      governance-multitenant-agent:
        condition: service_healthy
    networks:
      - governance-multitenant
      - host
    env_file:
      - environments/governance-public/fastapi.default.env
  governance-webhooks-web:
    image: ${REGISTRY:-local}/governance-webhooks-web:${IMAGE_TAG:-latest}
    container_name: governance-webhooks-web
    build:
      context: .
      dockerfile: ./dockerfiles/webhooks/Dockerfile
    ports:
      - 0.0.0.0:3010:3010
    volumes:
      - ./webhooks:/webhooks
      - ./logs:/logs
    networks:
      - governance-multitenant
      - governance-ga
      - host
      - redis-cluster-network
    depends_on:
      - redis-cluster
    env_file:
      - environments/webhooks/fastapi.webhooks.env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3010/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  governance-endorser:
    image: ${REGISTRY:-local}/governance-endorser:${IMAGE_TAG:-latest}
    container_name: governance-endorser
    build:
      context: .
      dockerfile: ./dockerfiles/endorser/Dockerfile
    ports:
      - 0.0.0.0:3009:3009
    volumes:
      - ./endorser:/endorser
      - ./logs:/logs
    networks:
      - governance-multitenant
      - governance-ga
      - host
      - redis-cluster-network
    depends_on:
      - redis-cluster
    env_file:
      - environments/endorser/endorser.env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3009/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis-cluster:
    image: redis:latest
    container_name: redis-cluster
    command: redis-cli --cluster create 172.29.0.101:6377 172.29.0.102:6378 172.29.0.103:6379 172.29.0.104:6380 172.29.0.105:6381 172.29.0.106:6382 --cluster-replicas 1 --cluster-yes
    networks:
      redis-cluster-network:
        ipv4_address: 172.29.0.107
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
  redis-node-1:
    image: redis:latest
    container_name: redis-node-1
    command: ["redis-server", "/conf/redis.conf", "--port 6377"]
    ports:
      - 6377:6377
    volumes:
      - ./config/redis.conf:/conf/redis.conf
    networks:
      redis-cluster-network:
        ipv4_address: 172.29.0.101
  redis-node-2:
    image: redis:latest
    container_name: redis-node-2
    command: ["redis-server", "/conf/redis.conf", "--port 6378"]
    ports:
      - 6378:6378
    volumes:
      - ./config/redis.conf:/conf/redis.conf
    networks:
      redis-cluster-network:
        ipv4_address: 172.29.0.102
  redis-node-3:
    image: redis:latest
    container_name: redis-node-3
    command: ["redis-server", "/conf/redis.conf", "--port 6379"]
    ports:
      - 6379:6379
    volumes:
      - ./config/redis.conf:/conf/redis.conf
    networks:
      redis-cluster-network:
        ipv4_address: 172.29.0.103
  redis-node-4:
    image: redis:latest
    container_name: redis-node-4
    command: ["redis-server", "/conf/redis.conf", "--port 6380"]
    ports:
      - 6380:6380
    volumes:
      - ./config/redis.conf:/conf/redis.conf
    networks:
      redis-cluster-network:
        ipv4_address: 172.29.0.104
  redis-node-5:
    image: redis:latest
    container_name: redis-node-5
    command: ["redis-server", "/conf/redis.conf", "--port 6381"]
    ports:
      - 6381:6381
    volumes:
      - ./config/redis.conf:/conf/redis.conf
    networks:
      redis-cluster-network:
        ipv4_address: 172.29.0.105
  redis-node-6:
    image: redis:latest
    container_name: redis-node-6
    command: ["redis-server", "/conf/redis.conf", "--port 6382"]
    ports:
      - 6382:6382
    volumes:
      - ./config/redis.conf:/conf/redis.conf
    networks:
      redis-cluster-network:
        ipv4_address: 172.29.0.106

  governance-multitenant-wallets-db:
    image: postgres:16-alpine
    container_name: governance-multitenant-wallets-db
    command: postgres -c listen_addresses='*' -c 'max_connections=500'
    env_file:
      - environments/governance-multitenant/db.default.env
    volumes:
      - ./resources/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - governance-multitenant
      - host
    tty: true
  ngrok-governance-multitenant:
    image: wernight/ngrok
    container_name: ngrok-governance-multitenant
    env_file:
      - environments/governance-multitenant/aca-py-agent.default.env
    command: ngrok http governance-multitenant-agent:3020 --log stdout
    networks:
      - governance-multitenant
      - host
    depends_on:
      ledger-nodes:
        condition: service_healthy
      ledger-browser:
        condition: service_healthy
  governance-multitenant-agent:
    image: ${REGISTRY:-local}/governance-multitenant-agent:${IMAGE_TAG:-latest}
    container_name: governance-multitenant-agent
    build:
      context: .
      dockerfile: dockerfiles/agents/Dockerfile.author.agent
      # To run a forked version of the agent use commented out code below
    #   context: https://github.com/didx-xyz/aries-cloudagent-python.git#0.12.2b2
    #   dockerfile: docker/Dockerfile
    # user: root
    # entrypoint:
    #   - sh
    #   - -c
    #   - |
    #     pip3 install --no-cache-dir git+https://github.com/didx-xyz/acapy-wallet-groups-plugin@1.0.0rc4
    #     pip3 install --no-cache-dir git+https://github.com/didx-xyz/aries-acapy-plugins@v1-2024-08-06#subdirectory=redis_events
    #     aca-py start \
    #       -it http "0.0.0.0" "3020" \
    #       -e http://governance-multitenant-agent:3020 \
    #       --wallet-type askar --auto-promote-author-did --plugin acapy_wallet_groups_plugin \
    #       --plugin redis_events.v1_0.redis_queue.events --plugin-config-value redis_queue.connection.connection_url=\"redis://172.29.0.101:6377\"
    env_file:
      - environments/governance-multitenant/aca-py-agent.default.env
    ports:
      - 0.0.0.0:4020:3020
      - 0.0.0.0:4021:3021
    depends_on:
      governance-multitenant-wallets-db:
        condition: service_started
      ledger-nodes:
        condition: service_healthy
      ledger-browser:
        condition: service_healthy
      redis-cluster:
        condition: service_started
    networks:
      - governance-multitenant
      - governance-ga
      - host
      - redis-cluster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3021/status/ready"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 15s
  ledger-browser:
    image: ${REGISTRY:-local}/ledger-nodes:${IMAGE_TAG:-latest}
    container_name: ledger-browser
    build:
      context: https://github.com/ff137/von-network.git#upgrades
      dockerfile: Dockerfile
    command: "bash -c './scripts/start_webserver.sh'"
    environment:
      - DOCKERHOST=${DOCKERHOST}
      - MAX_FETCH=50000
      - RESYNC_TIME=120
      - REGISTER_NEW_DIDS=True
      - LEDGER_INSTANCE_NAME=localhost
      - LOG_LEVEL=WARNING
      # - POOL_CONNECTION_ATTEMPTS=${POOL_CONNECTION_ATTEMPTS:-5}
      # - POOL_CONNECTION_DELAY=${POOL_CONNECTION_DELAY:-10}
      - LEDGER_SEED=${LEDGER_SEED:-000000000000000000000000Trustee1}
    ports:
      - ${WEB_SERVER_HOST_PORT:-9000}:8000
    volumes:
      - webserver-cli:/home/indy/.indy-cli
      - webserver-ledger:/home/indy/ledger
      - ./resources/ledger-nodes/aml.json:/home/indy/config/aml.json
      - ./resources/ledger-nodes/taa.json:/home/indy/config/taa.json
    networks:
      - governance-multitenant
      - governance-ga
      - host
    healthcheck:
      test: ["CMD", "curl", "-f", "http://ledger-browser:8000"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 15s
    depends_on:
      ledger-nodes:
        condition: service_healthy
  ledger-nodes:
    image: ${REGISTRY:-local}/ledger-nodes:${IMAGE_TAG:-latest}
    container_name: ledger-nodes
    build:
      context: https://github.com/ff137/von-network.git#upgrades
      dockerfile: Dockerfile
    command: "bash -c './scripts/start_nodes.sh'"
    ports:
      - 0.0.0.0:9701:9701
      - 0.0.0.0:9702:9702
      - 0.0.0.0:9703:9703
      - 0.0.0.0:9704:9704
      - 0.0.0.0:9705:9705
      - 0.0.0.0:9706:9706
      - 0.0.0.0:9707:9707
      - 0.0.0.0:9708:9708
    environment:
      - DOCKERHOST=${DOCKERHOST}
      - LOG_LEVEL=WARNING
    volumes:
      - nodes-data:/home/indy/ledger
      - ./scripts/indy_healthcheck.sh:/home/indy/indy_healthcheck.sh
    networks:
      - governance-multitenant
      - governance-ga
      - host
    healthcheck:
      test: ["CMD-SHELL", "/home/indy/indy_healthcheck.sh"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 30s
  tails-server:
    image: ${REGISTRY:-local}/tails-server:${IMAGE_TAG:-latest}
    container_name: tails-server
    build:
      context: https://github.com/bcgov/indy-tails-server.git#v1.1.0
      dockerfile: docker/Dockerfile.tails-server
    ports:
      - 0.0.0.0:6543:6543
    networks:
      - governance-multitenant
      - governance-ga
      - host
    environment:
      - DOCKERHOST=${DOCKERHOST}
    command: >
      tails-server
        --host 0.0.0.0
        --port 6543
        --storage-path ./
        --log-level INFO
  tests:
    image: local/tests
    container_name: tests
    restart: "no"
    build:
      context: .
      dockerfile: ./dockerfiles/tests/Dockerfile
    command:
      - /bin/sh
      - -c
      - |-
        poetry run pytest --junitxml="/tests/outputs/test_output_$(date +'%Y-%m-%d_%H-%M-%S').xml"
    environment:
      ACAPY_GOVERNANCE_AGENT_URL: http://governance-ga-agent:3021
      ACAPY_GOVERNANCE_AGENT_API_KEY: adminApiKey
      ACAPY_TENANT_AGENT_URL: http://governance-multitenant-agent:3021
      ACAPY_TENANT_AGENT_API_KEY: adminApiKey
      TRUST_REGISTRY_URL: http://governance-trust-registry:8001
      WEBHOOKS_URL: http://governance-webhooks-web:3010
      ACAPY_MULTITENANT_JWT_SECRET: jwtSecret
      GOVERNANCE_FASTAPI_ENDPOINT: http://governance-multitenant-web:8000
      GOVERNANCE_ACAPY_API_KEY: adminApiKey
      TENANT_FASTAPI_ENDPOINT: http://governance-multitenant-web:8000
      TENANT_ACAPY_API_KEY: adminApiKey
      LEDGER_REGISTRATION_URL: http://ledger-browser:8000/register
    volumes:
      - ./logs/containerized-tests:/tests/outputs
      - ./scripts/test_runner.sh:/tests/test_runner.sh
    networks:
      - governance-ga
      - host
    depends_on:
      governance-multitenant-web-health:
        condition: service_completed_successfully
  pytest:
    image: local/tests
    container_name: loop_tests
    restart: "no"
    build:
      context: .
      dockerfile: ./dockerfiles/tests/Dockerfile
    command:
      - /bin/sh
      - -c
      - |-
        ./test_runner.sh 5 poetry run pytest
    environment:
      ACAPY_GOVERNANCE_AGENT_URL: http://governance-ga-agent:3021
      ACAPY_GOVERNANCE_AGENT_API_KEY: adminApiKey
      ACAPY_TENANT_AGENT_URL: http://governance-multitenant-agent:3021
      ACAPY_TENANT_AGENT_API_KEY: adminApiKey
      TRUST_REGISTRY_URL: http://governance-trust-registry:8001
      WEBHOOKS_URL: http://governance-webhooks-web:3010
      ACAPY_MULTITENANT_JWT_SECRET: jwtSecret
      GOVERNANCE_FASTAPI_ENDPOINT: http://governance-multitenant-web:8000
      GOVERNANCE_ACAPY_API_KEY: adminApiKey
      TENANT_FASTAPI_ENDPOINT: http://governance-multitenant-web:8000
      TENANT_ACAPY_API_KEY: adminApiKey
      LEDGER_REGISTRATION_URL: http://ledger-browser:8000/register
    volumes:
      - ./logs/containerized-tests:/tests/outputs
      - ./scripts/test_runner.sh:/tests/test_runner.sh
    networks:
      - governance-ga
      - host
  governance-multitenant-web-health:
    image: curlimages/curl
    container_name: governance-multitenant-web-health
    restart: "no"
    command:
      - /bin/sh
      - -c
      - |-
        until curl -fsS http://governance-multitenant-web:8000/docs; do sleep 5; done
    networks:
      - governance-ga
      - host
    depends_on:
      governance-multitenant-web:
        condition: service_started

  nats-1:
    image: nats:alpine
    ports:
      - "8222:8222"
      - "4222:4222"
    command: "-c /etc/nats/nats.conf --server_name nats-1"
    volumes:
      - nats-data-1:/nats-data
      - ./resources/nats-local.conf:/etc/nats/nats.conf
    networks:
      - nats
    labels:
      app: nats
      tier: infra
    healthcheck:
      test: ["CMD-SHELL", 'wget -qO- localhost:8222/healthz | grep ''"status":"ok"'' || exit 1']
      start_period: 30s
      interval: 10s
      timeout: 10s
      retries: 5
  nats-2:
    image: nats
    command: "-c /etc/nats/nats.conf --server_name nats-2"
    volumes:
      - nats-data-2:/nats-data
      - ./resources/nats-local.conf:/etc/nats/nats.conf
    networks:
      - nats
    depends_on:
      nats-1:
        condition: service_started
    labels:
      app: nats
      tier: infra
  nats-3:
    image: nats
    command: "-c /etc/nats/nats.conf --server_name nats-3"
    volumes:
      - nats-data-3:/nats-data
      - ./resources/nats-local.conf:/etc/nats/nats.conf
    networks:
      - nats
    depends_on:
      nats-1:
        condition: service_started
    labels:
      app: nats
      tier: infra

volumes:
  webserver-cli:
  webserver-ledger:
  nodes-data:
  data:
  nats-data-1:
  nats-data-2:
  nats-data-3:

networks:
  governance-multitenant:
  governance-ga:
  host:
  redis-cluster-network:
    name: redis-cluster-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.29.0.0/24
          gateway: 172.29.0.1
  nats:
